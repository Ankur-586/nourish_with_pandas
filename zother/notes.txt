---------------------------------------- START -----------------------------------------
PACKAGES:
---------
1. pip install pandas
2. pip install openpyxl
3. pip install Flask
4. pip install tk-tools
--------------------

PIP Commands:
-------------
pip freeze > requirements.txt

search query:
-------------
how do i remove the unnamed row in dataframe pandas
remove initial lines in pandas dataframe
remove unnamed row pandas
check if a file exists inside a folder python pathlib
fetch a file exists inside a folder and if it does fetch its path python pathlib
choose file in python
when i read excel file in pandas the date column is getting converted to timestamp
choose excel file in python from a particular location and save it in a particular location

Import Links: (DO NOT DELETE)
-----------------------------
https://likegeeks.com/pandas-read-excel/
https://www.geeksforgeeks.org/different-ways-to-iterate-over-rows-in-pandas-dataframe/

--------------------------------------------------------------------------------------
My Requirements:
----------------
1. Download the excel from mail, upload the excel to a certain location.

2. Read the excel File, add gst columns to each product accroding to the gst 
   class which the product belongs to and calculate the price of each product
   according to its specific gst rate.

3. Now we have multiple different scenerios:
   a. On the first run, There will only 1 excel file. So gst calculation for 
      the products will be done. As there is no other excel file to compare with.

   b. When there is another run, Now new excel file is uploaded and we have a
      excel file which is already present. So Now a comparison will happen,
      and only those product  whose update date is greate than previous date
      will be updated

Challenges:
a. On the first run, there is no issue. The function to update the excel runs fine.
But on the second when is a new excel file to compare then how the function will
identiity that it should run for all product or a list of product.
--------------------------------------------------------------------------------------

Rew Usefull Codes:
------------------
# Load the data from the file (assuming the first sheet for now)
data = pd.ExcelFile(excel_file_path)
sheet_names = data.sheet_names

# Preview the first sheet's content to understand the structure
sheet_data = data.parse(sheet_names[0])
sheet_names, sheet_data.head(), sheet_data.info()
print(sheet_data.head())

# To zip files
product_names = df['Brand Name'].tolist()
product_weight = df['Pack Size'].to_list()
data = zip(product_names, product_weight)
print(list(data))

-----------------########################## END ##########################----------------------


--------------------------------------------------------------------------
Few pandas useful lines. Do Research On how it works And DO NOT DELETE
----------------------------------------------------------------------
print(list(df.columns.values))
# df.columns = df.columns.str.strip()
# prod_pri = df['MRP'].to_list()

to convert df back to excel:
# df.to_excel('cleaned_files.xlsx', index=True)

df = pd.read_excel(excel_file_path, engine='openpyxl',  index_col=0, parse_dates=['MRP Update Date '])

columns_to_drop = [col for col in df1.columns if col.startswith('Unnamed:')]
---------------------------------------------------------------------------

------------------------------------------------
for index, row in df.iterrows():
    print(f"S.No: {index}, Row:\n{row}")

o/p: of the above code
# S.No                                     1
# Brand Name          Bail Kolhu Mustard Oil
# Type                               Pet Jar
# Pack Size                          15 Ltr 
# MRP Update Date        2025-01-08 00:00:00
# MRP/-                               2977.0
# Name: 0, dtype: object
-------------------------------------------------
-------------------------------------------------------------------------------------
print(df)
     S.No                Brand Name          Type Pack Size MRP Update Date    MRP/-
0       1    Bail Kolhu Mustard Oil       Pet Jar   15 Ltr        2025-01-08  2977.0
1       2    Bail Kolhu Mustard Oil       Pet Jar      5 L        2025-01-08  1027.0
2       3    Bail Kolhu Mustard Oil       Pet Jar      2 L        2025-01-08   411.0
3       4    Bail Kolhu Mustard Oil    Pet Bottle      1 L        2025-01-08   203.0
4       5    Bail Kolhu Mustard Oil         Pouch      1 L        2025-01-08   196.0
..    ...                       ...           ...       ...              ...     ...
121   123         Nourish Pistachio    Monocarton    250 gm       2024-11-11   528.0
122   124        Nourish Chia Seeds    Monocarton    250 gm       2024-11-11   239.0
123   125  Nourish Sunflower Seeds     Monocarton    250 gm       2024-11-11   239.0
124   126    Nourish Pumpkin Seeds     Monocarton    250 gm       2024-11-11   239.0
125   127      Nourish Gond Katira   Zipper Pouch     50 gm       2024-11-11    38.0
----------------------------------------------------------------------------------------

https://python.plainenglish.io/how-i-automated-data-cleaning-in-python-using-functions-and-pipelines-95b8ad0f6ea5


DO NOT DELETE:
--------------
In my organstion we have 5 products 2 websites and 3 mobile apps. 
Now suppose i am a member of my team. 
And i have been assigned all the testing taks. But from past 1 year,  
i am doing manual testing. What proccess 
i can set to improve the tesing and build a TESTING DEPARTMENT. 


print('product_to_update_set',product_to_update_set)
filtered_df = new_df[new_df.apply(lambda row: (row['Brand Name'].strip(), row['Pack Size'].strip()) in product_to_update_set, axis=1)]
print('filtered_df',filtered_df)
def apply_gst(row):
        brand_name = row['Brand Name'].strip()
        price = row['MRP/-']

        if brand_name in gst_5_percent_brands:
            gst_rate = 5.0
            gst_group = 'GST 5%'
        elif brand_name in gst_0_percent_brands:
            gst_rate = 0.0
            gst_group = 'GST 0%'
        elif brand_name in gst_12_percent_brands:
            gst_rate = 12.0
            gst_group = 'GST 12%'
        else:
            print(f"Brand '{brand_name}' is NOT found in any GST group")
            return row

        # Calculate GST amounts
        pre_gst_amt, total_gst = gst_amount(price, gst_rate)

        # Update row with calculated values
        row['GST'] = gst_group
        row['Amount Before Tax'] = pre_gst_amt
        row['Total GST'] = total_gst
        return row

    # Apply the function to each row in filtered_df
    filtered_df = filtered_df.apply(apply_gst, axis=1)

    # After applying GST, save the filtered updated DataFrame to a new file
    output_file_path = f'excel_file/updated_price/MRP New Update ({current_date}).xlsx'
    filtered_df.to_excel(output_file_path, index=False)
    print(f"Updated file saved to: {output_file_path}")